require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HubsController do
  context "user is not signed in" do
    it "should reject unauthorized access to all actions" do
      # A bit ghetto, sorry.
      get :index
      response.should redirect_to new_user_session_url
      get :show
      response.should redirect_to new_user_session_url
      get :new
      response.should redirect_to new_user_session_url
      get :edit
      response.should redirect_to new_user_session_url
      post :create
      response.should redirect_to new_user_session_url
      put :update
      response.should redirect_to new_user_session_url
      delete :destroy
      response.should redirect_to new_user_session_url
    end
  end

  context "user is signed in" do

    before (:each) do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    # Required attributes for creation of valid hub
    # Factory girl is used to obtain a sample mac address
    def valid_attributes
      {:user_id => @user.id}.merge(FactoryGirl.attributes_for(:hub))
    end

    it "should have a current user" do
      subject.current_user.should_not be_nil
    end

    describe "GET index" do
      it "assigns all hubs as @hubs" do
        hub = FactoryGirl.create(:hub, :user => @user)
        get :index, {}
        response.should_not redirect_to new_user_session_url
        assigns(:hubs).should eq([hub])
      end
    end

    describe "GET show" do
      it "assigns the requested hub as @hub" do
        hub = FactoryGirl.create(:hub, :user => @user)
        get :show, {:id => hub.to_param}
        assigns(:hub).should eq(hub)
      end
    end

    describe "GET new" do
      it "assigns a new hub as @hub" do
        get :new, {}
        assigns(:hub).should be_a_new(Hub)
      end
    end

    describe "GET edit" do
      it "assigns the requested hub as @hub" do
        hub = FactoryGirl.create(:hub, :user => @user)
        get :edit, {:id => hub.to_param}
        assigns(:hub).should eq(hub)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Hub" do
          expect {
            post :create, {:hub => valid_attributes}
          }.to change(Hub, :count).by(1)
        end

        it "assigns a newly created hub as @hub" do
          post :create, {:hub => valid_attributes}
          assigns(:hub).should be_a(Hub)
          assigns(:hub).should be_persisted
        end

        it "redirects to the created hub" do
          post :create, {:hub => valid_attributes}
          response.should redirect_to(Hub.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved hub as @hub" do
          # Trigger the behavior that occurs when invalid params are submitted
          Hub.any_instance.stub(:save).and_return(false)
          post :create, {:hub => {}}
          assigns(:hub).should be_a_new(Hub)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Hub.any_instance.stub(:save).and_return(false)
          post :create, {:hub => {}}
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested hub" do
          hub = FactoryGirl.create(:hub, :user => @user)
          # Assuming there are no other hubs in the database, this
          # specifies that the Hub created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Hub.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
          put :update, {:id => hub.to_param, :hub => {'these' => 'params'}}
        end

        it "assigns the requested hub as @hub" do
          hub = FactoryGirl.create(:hub, :user => @user)
          put :update, {:id => hub.to_param, :hub => valid_attributes}
          assigns(:hub).should eq(hub)
        end

        it "redirects to the hub" do
          hub = FactoryGirl.create(:hub, :user => @user)
          put :update, {:id => hub.to_param, :hub => valid_attributes}
          response.should redirect_to(hub)
        end
      end

      describe "with invalid params" do
        it "assigns the hub as @hub" do
          hub = FactoryGirl.create(:hub, :user => @user)
          # Trigger the behavior that occurs when invalid params are submitted
          Hub.any_instance.stub(:save).and_return(false)
          put :update, {:id => hub.to_param, :hub => {}}
          assigns(:hub).should eq(hub)
        end

        it "re-renders the 'edit' template" do
          hub = FactoryGirl.create(:hub, :user => @user)
          # Trigger the behavior that occurs when invalid params are submitted
          Hub.any_instance.stub(:save).and_return(false)
          put :update, {:id => hub.to_param, :hub => {}}
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested hub" do
        hub = FactoryGirl.create(:hub, :user => @user)
        expect {
          delete :destroy, {:id => hub.to_param}
        }.to change(Hub, :count).by(-1)
      end

      it "redirects to the hubs list" do
        hub = FactoryGirl.create(:hub, :user => @user)
        delete :destroy, {:id => hub.to_param}
        response.should redirect_to(hubs_url)
      end
    end
  end
end
