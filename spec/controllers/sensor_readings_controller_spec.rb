require 'spec_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SensorReadingsController do

  # This should return the minimal set of attributes required to create a valid
  # SensorReading. As you add validations to SensorReading, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  context "user is not signed in" do

    it "should reject unauthorized access to all actions" do
      # A bit ghetto, sorry.
      get :index
      response.should redirect_to new_user_session_url
      get :show
      response.should redirect_to new_user_session_url
    end

    describe "POST create" do
      # TODO: add interesting failure test cases

      describe "with valid params" do
        it "creates a new SensorReading" do
          sensor = FactoryGirl.create(:sensor)
          expect {
            post :create, { :sensor_reading => { :watthours => 99,
                                                 :mac_address => sensor.mac_address } }
          }.to change(SensorReading, :count).by(1)
        end
      end

      it "should be assigned to two different sensors for readings originating from two different MACs " do
        sensor1 = FactoryGirl.create(:sensor)
        sensor2 = FactoryGirl.create(:sensor)

        post :create, { :sensor_reading => { :watthours => 1,
                                             :mac_address => sensor1.mac_address } }
        sensor_reading1 = SensorReading.last
        post :create, { :sensor_reading => { :watthours => 2,
                                             :mac_address => sensor2.mac_address } }
        sensor_reading2 = SensorReading.last

        # being extra nutty careful here
        sensor_reading1.sensor.should_not equal(sensor_reading2.sensor)
        sensor_reading1.sensor.should == sensor1
        sensor_reading2.sensor.should == sensor2
        sensor_reading1.sensor.should_not == sensor_reading2.sensor
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved sensor_reading as @sensor_reading" do
          # Trigger the behavior that occurs when invalid params are submitted
          SensorReading.any_instance.stub(:save).and_return(false)
          post :create, {:sensor_reading => {}}
          assigns(:sensor_reading).should be_a_new(SensorReading)
        end
      end
    end
  end

  context "user is logged in" do

    before (:each) do
      # @request.env["devise.mapping"] = Devise.mappings[:user]
      @user = FactoryGirl.create(:user)
      sign_in @user
      @sensor = FactoryGirl.create(:sensor, :user => @user)
    end

    describe "GET index" do
      it "assigns all sensor_readings as @sensor_readings" do
        sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
        get :index, {}
        assigns(:sensor_readings).should eq([sensor_reading])
      end
    end

    describe "GET show" do
      it "assigns the requested sensor_reading as @sensor_reading" do
        sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
        get :show, {:id => sensor_reading.to_param}
        assigns(:sensor_reading).should eq(sensor_reading)
      end
    end

    # describe "GET new" do
    #   it "assigns a new sensor_reading as @sensor_reading" do
    #     get :new, {}
    #     assigns(:sensor_reading).should be_a_new(SensorReading)
    #   end
    # end

    # describe "GET edit" do
    #   it "assigns the requested sensor_reading as @sensor_reading" do
    #     sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #     get :edit, {:id => sensor_reading.to_param}
    #     assigns(:sensor_reading).should eq(sensor_reading)
    #   end
    # end

    # describe "PUT update" do
    #   describe "with valid params" do
    #     it "updates the requested sensor_reading" do
    #       sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #       # Assuming there are no other sensor_readings in the database, this
    #       # specifies that the SensorReading created on the previous line
    #       # receives the :update_attributes message with whatever params are
    #       # submitted in the request.
    #       SensorReading.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
    #       put :update, {:id => sensor_reading.to_param, :sensor_reading => {'these' => 'params'}}
    #     end

    #     it "assigns the requested sensor_reading as @sensor_reading" do
    #       sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #       put :update, {:id => sensor_reading.to_param, :sensor_reading => valid_attributes}
    #       assigns(:sensor_reading).should eq(sensor_reading)
    #     end

    #     it "redirects to the sensor_reading" do
    #       sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #       put :update, {:id => sensor_reading.to_param, :sensor_reading => valid_attributes}
    #       response.should redirect_to(sensor_reading)
    #     end
    #   end

    #   describe "with invalid params" do
    #     it "assigns the sensor_reading as @sensor_reading" do
    #       sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       SensorReading.any_instance.stub(:save).and_return(false)
    #       put :update, {:id => sensor_reading.to_param, :sensor_reading => {}}
    #       assigns(:sensor_reading).should eq(sensor_reading)
    #     end

    #     it "re-renders the 'edit' template" do
    #       sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       SensorReading.any_instance.stub(:save).and_return(false)
    #       put :update, {:id => sensor_reading.to_param, :sensor_reading => {}}
    #       response.should render_template("edit")
    #     end
    #   end
    # end

    # describe "DELETE destroy" do
    #   it "destroys the requested sensor_reading" do
    #     sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #     expect {
    #       delete :destroy, {:id => sensor_reading.to_param}
    #     }.to change(SensorReading, :count).by(-1)
    #   end

    #   it "redirects to the sensor_readings list" do
    #     sensor_reading = FactoryGirl.create(:sensor_reading, :sensor => @sensor)
    #     delete :destroy, {:id => sensor_reading.to_param}
    #     response.should redirect_to(sensor_readings_url)
    #   end
    # end
  end
end
